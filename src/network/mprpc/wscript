import Options

def options(opt):
  opt.add_option('--enable-libevent',
                 action = 'store_true',
                 default = False,
                 help = 'enable libevent with mprpc')

def configure(conf):
  if Options.options.enable_libevent:
    # check libevent 2.x
    if not conf.check_cfg(package='libevent', args='--cflags --libs', mandatory = False):
      # check event.h(1.x and 2.x)
      conf.check_cxx(header_name = 'event.h', lib = 'event', uselib_store = 'LIBEVENT', mandatory = True)

def build(bld):
  bld.install_files('${HPREFIX}/network/mprpc', [
      'argument.h',
      'caller.h',
      'exception.h',
      'invoker.h',
      'message.h',
      'object_stream.h',
      'rpc_client.h',
      'rpc_server.h',
      'rpc_stream.h',
      'socket.h',
      ])

  t = bld.shlib(
    source = [
      'object_stream.cpp',
      'rpc_client.cpp',
      'rpc_server.cpp',
      'rpc_stream.cpp',
      'socket.cpp'
      ],
    target = 'pficommon_network_mprpc',
    vnum = bld.env['VERSION'],
    includes = '.',
    use = ['pficommon_concurrent', 'pficommon_network_base', 'MSGPACK'])

  # link libevent
  if ('HAVE_EVENT' in bld.env) or ('HAVE_EVENT_H' in bld.env):
    t.use.append('LIBEVENT')
